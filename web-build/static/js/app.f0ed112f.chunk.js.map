{"version":3,"sources":["src/Components/season_adapter.tsx","src/Screens/home_screen.tsx","src/Components/race_adapter.tsx","src/Screens/races_screen.tsx","src/Components/rank_adapter.tsx","src/Screens/rank_screen.tsx","src/App.tsx","index.js"],"names":["SeasonAdapter","season","this","props","navigation","View","style","styles","row","Image","image","source","uri","Text","onPress","navigate","text","React","Component","deviceWidth","Dimensions","get","width","StyleSheet","create","height","flexDirection","justifyContent","alignContent","backgroundColor","borderColor","padding","borderBottomWidth","marginLeft","color","fontSize","fontWeight","alignSelf","Homescreen","state","seasons","getSeasons","alert","fetch","then","response","json","setState","MRData","SeasonTable","Seasons","catch","error","console","container","orange","sayHello","FlatList","flatlist","data","sort","a","b","parseInt","keyExtractor","index","renderItem","item","footer","flex","alignItems","flexWrap","RaceAdapter","race","raceName","Circuit","circuitName","date","RacesScreen","races","getRaces","route","params","RaceTable","Races","round","position","RankAdapter","raceResult","Driver","givenName","familyName","Constructor","name","Time","time","RankScreen","log","Results","Stack","createStackNavigator","App","NavigationContainer","Navigator","Screen","component","registerRootComponent"],"mappings":"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","file":"static/js/app.f0ed112f.chunk.js","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, Image, Dimensions } from 'react-native';\nimport { NavigationScreenProp } from 'react-navigation';\nimport type { Season } from '../Types/season'\n\ntype Props = {\n   season: Season;\n   navigation: NavigationScreenProp<any,any>;\n}\n\nexport class SeasonAdapter extends React.Component<Props> {\n    render() {\n        const { season } = this.props\n        const { navigation } = this.props\n        return (\n            <View style={styles.row}>\n                <Image\n                  style={ styles.image }\n                  source={{ uri: 'https://www.shareicon.net/data/512x512/2016/05/26/771264_cup_512x512.png'}}                 \n                />\n                <Text \n                  onPress = { \n                    () => navigation.navigate(\n                      'Races',\n                      { season: season.season }\n                    ) \n                  }\n                  style={ styles.text }\n                > {season.season}</Text>\n            </View> \n        )\n    }\n}\n\nconst deviceWidth = Dimensions.get('window').width\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 90, \n    height: 90,\n  },\n  row:{\n    flexDirection: 'row',\n    height: 120,\n    width: deviceWidth,\n    justifyContent: 'flex-start',\n    alignContent: 'center', \n    backgroundColor: '#333333',\n    borderColor: '#000000',\n    padding: 20,\n    borderBottomWidth: 1,\n  },\n  text: {\n    marginLeft: 10,\n    color: '#fff',\n    backgroundColor: '#333333',\n    fontSize: 18,\n    fontWeight: 'bold',\n    alignSelf: 'center'\n  },\n})","import React from 'react';\nimport { StyleSheet, Text, View, Dimensions, FlatList } from 'react-native';\nimport { SeasonAdapter } from '../Components/season_adapter'\nimport { NavigationScreenProp } from 'react-navigation';\nimport { Season } from '../Types/season'\n\ntype Props = {\n  navigation: NavigationScreenProp<any,any>;\n}\n\ntype State = {\n  seasons: Season[] | undefined\n}\n\nexport class Homescreen extends React.Component<Props, State> {\n    constructor(props : Props) {\n        super(props)\n        this.state = { seasons: [] }\n        this.getSeasons()\n    }\n    \n    sayHello() {\n      alert('Welcome to the F1 history')\n    }\n\n    getSeasons() {\n        fetch('http://ergast.com/api/f1/seasons.json?limit=72')\n        .then((response) => response.json())\n        .then((json) => { \n            this.setState({seasons: json.MRData.SeasonTable.Seasons})\n        })\n        .catch((error) => console.error(error))\n    }\n\n    render() {\n        return (<View style={styles.container}>\n        <Text style={styles.orange} onPress={this.sayHello}>F1 History</Text>\n            <FlatList\n              style= { styles.flatlist }\n              data= { this.state.seasons?.sort((a,b) => parseInt(b.season)-parseInt(a.season))}\n              keyExtractor= {({ season }, index) => season }\n              renderItem= {({item}) => (\n                  <SeasonAdapter \n                    season={ item } \n                    navigation= {this.props.navigation}\n                  />\n              )} \n            />\n        <Text style={styles.footer}>Footer</Text>\n        </View>\n      )\n    }\n}\n\nconst deviceWidth = Dimensions.get('window').width\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#AAAAAA',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  flatlist: {\n    flexWrap: 'wrap',\n    width: deviceWidth,\n  },\n  orange: {\n    color: '#FF9800',\n    backgroundColor: '#000000',\n    padding: 10,\n    width: deviceWidth,\n  },\n  footer: {\n    flex: 1,\n    color: '#fff',\n    backgroundColor: '#00FF98',\n    padding: 10,\n    width: deviceWidth,\n  }\n});\n","import { NavigationScreenProp } from 'react-navigation';\nimport React from 'react';\nimport { StyleSheet, Text, View, Image, Dimensions } from 'react-native';\nimport { Race } from '../Types/race_types';\n\ntype Props = {\n  race: Race;\n  navigation: NavigationScreenProp<any,any>;\n}\n\nexport class RaceAdapter extends React.Component<Props> {\n    render() {\n        const { race } = this.props\n        const { navigation } = this.props\n        return (\n            <View style={styles.row}>\n                <Image\n                  style={ styles.image }\n                  source={{ uri: 'https://image.flaticon.com/icons/png/512/147/147216.png' }} \n                  />\n                <Text \n                  onPress = { \n                    () => navigation.navigate(\n                      'Rank',\n                      { race: race }\n                    ) \n                  }\n                  style={ styles.text }\n                > {race.raceName} ({race.Circuit ? race.Circuit.circuitName : \"\" } ) - {race.date} </Text>\n            </View> \n        )\n    }\n}\n\nconst deviceWidth = Dimensions.get('window').width\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 120, \n    height: 120,\n  },\n  row:{\n    flexDirection: 'row',\n    height: 120,\n    width: deviceWidth,\n    justifyContent: 'flex-start',\n    alignContent: 'center', \n    backgroundColor: '#333333',\n    borderColor: '#000000',\n    padding: 20,\n    borderBottomWidth: 1,\n  },\n  text: {\n    marginLeft: 10,\n    color: '#fff',\n    backgroundColor: '#333333',\n    fontSize: 12,\n    fontWeight: 'bold',\n    alignSelf: 'center'\n  },\n})","import React from 'react';\nimport { StyleSheet, Text, View, Dimensions, FlatList } from 'react-native';\nimport { RaceAdapter } from '../Components/race_adapter'\nimport { NavigationScreenProp } from 'react-navigation';\nimport { RouteProp } from '@react-navigation/native'\nimport type { Race } from '../Types/race_types'\n\ntype RootStackParamList = {\n  Season: {\n    season: string\n  } \n}\n\ntype RaceScreenRouteProp = RouteProp<RootStackParamList, 'Season'>\n\ntype Props = {\n  route: RaceScreenRouteProp,\n  navigation: NavigationScreenProp<any,any>;\n}\n\ntype State = {\n  races: Race[]\n}\n\nexport class RacesScreen extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = { races: [] }\n        this.getRaces()\n    }\n\n    getRaces() {\n        fetch(`http://ergast.com/api/f1/${this.props.route.params.season}/results.json?limit=400`)\n        .then((response) => response.json())\n        .then((json) => { \n            this.setState({races: json.MRData.RaceTable.Races})\n        })\n        .catch((error) => console.error(error))\n    }\n\n    render() {\n        const  season : string = this.props.route.params.season\n        const  navigation : NavigationScreenProp<any, any> = this.props.navigation\n\n        return (\n        <View style={styles.container}>\n          <Text \n            style={styles.orange} \n          > { season } Season - Races\n          </Text>\n          <FlatList\n            style= { styles.flatlist }\n            data= { this.state.races }\n            keyExtractor= {({ round }, index) => round }\n            renderItem= {({item}) => (\n              <RaceAdapter race={ item } navigation={ navigation }/>\n            )} \n           />\n          <Text style={styles.footer}>Footer</Text>\n        </View>\n      )\n    }\n}\n\nconst deviceWidth = Dimensions.get('window').width\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#AAAAAA',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  flatlist: {\n    flexWrap: 'wrap',\n    width: deviceWidth,\n  },\n  orange: {\n    color: '#FF9800',\n    backgroundColor: '#000000',\n    padding: 10,\n    width: deviceWidth,\n  },\n  footer: {\n    color: '#fff',\n    backgroundColor: '#00FF98',\n    padding: 10,\n    position: 'relative',\n    width: deviceWidth,\n  }\n});\n","import React from 'react';\nimport { \n  StyleSheet, \n  Text, View, \n  Image, \n  Dimensions \n} from 'react-native';\nimport type { \n  RaceResult\n} from '../Types/race_types'\n\ninterface Props {\n   raceResult: RaceResult;\n}\n\nexport class RankAdapter extends React.Component<Props> {\n    render() {\n        const { raceResult } = this.props;\n\n        return (\n            <View style={styles.row}>\n                <Image\n                  style={ styles.image }\n                  source={{ uri: 'https://image.flaticon.com/icons/png/512/164/164443.png' }} \n                  />\n                <Text \n                  style={ styles.text }\n                > {raceResult.position}) {raceResult.Driver?.givenName} {raceResult.Driver?.familyName} - {raceResult.Constructor?.name} : {raceResult.Time?.time}</Text>\n            </View>\n        )\n    }\n}\n\nconst deviceWidth = Dimensions.get('window').width\n\nconst styles = StyleSheet.create({\n  image: {\n    width: 120, \n    height: 120,\n  },\n  row:{\n    flexDirection: 'row',\n    height: 120,\n    width: deviceWidth,\n    justifyContent: 'flex-start',\n    alignContent: 'center', \n    backgroundColor: '#333333',\n    borderColor: '#000000',\n    padding: 20,\n    borderBottomWidth: 1,\n  },\n  text: {\n    marginLeft: 10,\n    color: '#fff',\n    backgroundColor: '#333333',\n    fontSize: 12,\n    fontWeight: 'bold',\n    alignSelf: 'center'\n  },\n})","\nimport React from 'react';\nimport { StyleSheet, Text, View, Dimensions, FlatList } from 'react-native'\nimport { RankAdapter } from '../Components/rank_adapter'\nimport type { Race, RaceResult } from '../Types/race_types'\nimport { NavigationScreenProp } from 'react-navigation';\nimport { RouteProp } from '@react-navigation/native'\n\ntype RootStackParamList = {\n  Race: { race: Race }\n}\n\ntype RankScreenRouteProp = RouteProp<RootStackParamList, 'Race'>\n\ntype Props = {\n  route: RankScreenRouteProp;\n  navigation: NavigationScreenProp<any,any>;\n}\n\nexport class RankScreen extends React.Component<Props> {\n    render() {\n        const { race }  = this.props.route.params\n        console.log(\"params\", this.props.route)\n        console.log(\"Race: \", race)\n        console.log(\"Results: \", race.Results)\n        const { navigation } = this.props\n        return (\n        <View style={styles.container}>\n          <Text \n            style={styles.orange} \n          > { race.season } Season - { race.Circuit?.circuitName }\n          </Text>\n          <FlatList\n            style= { styles.flatlist }\n            data= { race.Results }\n            keyExtractor= {({ position }, index) => position }\n            renderItem= {({item}) => (\n              <RankAdapter raceResult={ item } />\n            )} \n           />\n          <Text style={styles.footer}>Footer</Text>\n        </View>\n      )\n    }\n}\n\nconst deviceWidth = Dimensions.get('window').width\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#AAAAAA',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  flatlist: {\n    flexWrap: 'wrap',\n    width: deviceWidth,\n  },\n  orange: {\n    color: '#FF9800',\n    backgroundColor: '#000000',\n    padding: 10,\n    width: deviceWidth,\n  },\n  footer: {\n    flex: 1,\n    color: '#fff',\n    backgroundColor: '#00FF98',\n    padding: 10,\n    width: deviceWidth,\n  }\n});\n","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Homescreen } from \"./Screens/home_screen\"\nimport { RacesScreen } from \"./Screens/races_screen\"\nimport { RankScreen } from \"./Screens/rank_screen\"\n\nconst Stack = createStackNavigator()\n\nexport const App = () => {\n  return (\n  <SafeAreaProvider>\n    <NavigationContainer>\n      <Stack.Navigator >\n        <Stack.Screen\n          component={ Homescreen }\n          name = 'F1'\n        />\n        <Stack.Screen\n          component={ RacesScreen }\n          name = 'Races'\n        />\n        <Stack.Screen\n          component={ RankScreen }\n          name = 'Rank'\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  </SafeAreaProvider> \n  )\n}\n\nexport default App;","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './src/App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}